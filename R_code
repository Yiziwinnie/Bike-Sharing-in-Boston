######################## Yizi (Winnie) Huangâ€™s Work###################################
library(ggplot2)
library(reshape)
library(scales)
library(readxl)
library(lubridate) # work with dates
library(dplyr) 
library(gridExtra)
library(ggalt)
library(tidyverse)
import::from("stats", "filter") 

Code for Calendar Heatmap:

##import data
setwd('/Users/yizihuang/Documents/CSC465 Data Visualization/Final Project/Bike-Sharing-Dataset')
getwd()

## draft of heat map
bike = read.table("day.csv", header = TRUE,sep = ",")
bike$day <- strftime(bike$dteday, format="%e")
bike$month<- strftime(bike$dteday, format="%b")
bike$year<- strftime(bike$dteday, format="%Y")
bike_hour = read.table("hour.csv", header = TRUE,sep = ",")

## normalize the value of casaul & registered users
bike_norm = as.data.frame(apply(bike[, 14:15], 2, function(x) (x - min(x))/(max(x)-min(x))))
bike$casual = bike_norm$casual
bike$registered = bike_norm$registered
names(bike)

limit=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
ggplot(bike, aes(x = month, y = day)) +
  geom_tile(aes(fill = cnt),color = "black")+
  scale_fill_gradient(low = "white", high = "steelblue")+
  scale_x_discrete(limits=limit)+
  xlab("Month [Year of 2011]") +
  ylab("Date of Month")+
  labs(title = "The Daily bike sharing",fill = "Rent count")+
  labs(fill = "Rent Account", size=0.5)+
  theme(plot.title = element_text(hjust = 0.5,color="#666666", face="bold", size=15))

## subset dataset get casaul & registered users in 2011
bike2011= bike[1:365,]
names(bike2011)
bike2011_casual= bike2011[,-(15)]
bike2011_registered = bike2011[,-(14)]

## subset dataset get casaul & registered users in 2012
bike2012= bike[366:731,]
bike2012_casual= bike2012[,-(15)]
bike2012_registered = bike2012[,-(14)]

## draft heat map in 2011: casaul & registered users
ggplot(bike2011, aes(x = month, y = day)) +
  geom_tile(aes(fill = cnt),color = "black")+
  scale_fill_gradient(low = "white", high = "steelblue")+
  scale_x_discrete(limits=limit)+
  xlab("Month [Year of 2011]") +
  ylab("Date of Month")+
  labs(title = "The Daily bike sharing",fill = "Rent count")+
  labs(fill = "Rent Account", size=0.5)+
  theme(plot.title = element_text(hjust = 0.5,color="#666666", face="bold", size=15))

## draft heat map in 2012: casaul & registered users
ggplot(bike2012, aes(x = month, y = day)) +
  geom_tile(aes(fill = cnt),color = "black")+
  scale_fill_gradient(low = "white", high = "steelblue")+
  scale_x_discrete(limits=limit)+
  xlab("Month [Year of 2012]") +
  ylab("Date of Month")+
  labs(title = "The Daily bike sharing",fill = "Rent count")+
  labs(fill = "Rent Account", size=0.5)+
  theme(plot.title = element_text(hjust = 0.5,color="#666666", face="bold", size=15))

## Calendar Heatmap
###########################################################      
#setwd('/Users/yizihuang/Documents/CSC465 Data Visualization/Final Project')
#getwd()
      

source("calendarHeat.R")
library(chron)
library(lattice)
library(grid)

#setwd('/Users/yizihuang/Documents/CSC465 Data Visualization/Final Project/Bike-Sharing-Dataset')
#getwd()

#bike = read.table("day.csv", header = TRUE,sep = ",")
#bike$day <- strftime(bike$dteday, format="%e")
#bike$month<- strftime(bike$dteday, format="%b")
#bike$year<- strftime(bike$dteday, format="%Y")

calendarHeat(dates=bike$dteday, values=bike$cnt,varname="Total Sharing Bike Rental Count",color="r2r")
calendarHeat(dates=bike2011_casual$dteday, values=bike2011_casual$casua,varname="Total Sharing Bike Rental Count: Casual Users",color="r2r")
calendarHeat(dates=bike2011_registered$dteday, values=bike2011_registered$registered,varname="Total Sharing Bike Rental Count: Registered Users",color="r2r")
calendarHeat(dates=bike2012_casual$dteday, values=bike2012_casual$casua,varname="Total Sharing Bike Rental Count: Casual Users",color="r2r")
calendarHeat(dates=bike2012_registered$dteday, values=bike2012_registered$registered,varname="Total Sharing Bike Rental Count: Registered Users",color="r2r")


Code for Polar Chart: 

setwd('/Users/yizihuang/Documents/CSC465 Data Visualization/Final Project/Bike-Sharing-Dataset')
getwd()
  
bike = read.table("hour.csv", header = TRUE,sep = ",")
bike$day <- strftime(bike$dteday, format="%e")
bike$month<- strftime(bike$dteday, format="%b")
bike$year<- strftime(bike$dteday, format="%Y")

bike$registered = sqrt(bike$registered)
#bike$casual= sqrt(bike$casual)
melt_hour = melt(bike, id=c("instant","dteday","season","yr","mnth","hr","holiday","weekday","workingday","weathersit", "temp","atemp","hum","windspeed","cnt","day","month","year"))
  
  
bike_agg = aggregate( value~ hr+ variable , melt_hour, mean)
bike_agg$new <- with(bike_agg, ifelse(variable== 'casual', -value, value))
  

time=c("0:00","1:00","2:00","3:00","4:00","5:00","6:00","7:00","8:00","9:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00","18:00","19:00","20:00","21:00","22:00","23:00")

library("ggplot2")
library("ggthemes")
 ggplot(data=bike_agg, aes(x=as.factor(hr),y=new,fill=variable),alpha=0.5)+
   geom_bar(stat="identity",position = "stack")+
   coord_polar()+
   scale_x_discrete(labels=time)+
   theme(axis.text.x = element_text(size=10,face = "bold"),axis.title.x=element_blank())+
   guides(fill=guide_legend("Users"))+
   labs(title = "Rental Counts vs Hour for different User Type")+
   theme(plot.title = element_text(hjust = 0.5,color="Black", face="bold", size=15))+
   xlab(" ")+
   ylab("Average Rent Count (sqrt)")+
   scale_fill_manual(values=c("#66c2a4","#fdbb84"))

 ####################################################################################################################################################################################################################

 ##############################################################################
 #                        Calendar Heatmap                                    #
 #                                by                                          #
 #                         Paul Bleicher                                      #
 # an R version of a graphic from:                                            #
 # http://stat-computing.org/dataexpo/2009/posters/wicklin-allison.pdf        #
 #  requires lattice, chron, grid packages                                    #
 ############################################################################## 
 require(lattice); require(chron); require(grid)
 
 ## calendarHeat: An R function to display time-series data as a calendar heatmap 
 ## Copyright 2009 Humedica. All rights reserved.
 
 ## This program is free software; you can redistribute it and/or modify
 ## it under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2 of the License, or
 ## (at your option) any later version.
 
 ## This program is distributed in the hope that it will be useful,
 ## but WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 
 ## You can find a copy of the GNU General Public License, Version 2 at:
 ## http://www.gnu.org/licenses/gpl-2.0.html
 
 #' An R function to display time-series data as a calendar heatmap
 #'
 #' This graphic originally appeared \href{http://stat-computing.org/dataexpo/2009/posters/wicklin-allison.pdf}{here}.
 #' This function is included with the \code{makeR} package to support the
 #' R-Bloggers demo. See \code{demo('makeR')} for more information.
 #'
 #' @param dates vector of Dates
 #' @param values vector of values
 #' @param ncolors number of colors to use
 #' @param color the color scheme to use. Currently supports r2b, (red to blue),
 #'        r2g (red to green), and w2b (white to blue).
 #' @param varname varaible names
 #' @param date.form the format of the Date column
 #' @param ... other non-specified parameters
 #' @author Paul Bleicher
 #' @export
 calendarHeat <- function(dates, 
                          values, 
                          ncolors=99, 
                          color="r2g", 
                          varname="Values",
                          date.form = "%Y-%m-%d", ...) {
   require(lattice)
   require(grid)
   require(chron)
   if (class(dates) == "character" | class(dates) == "factor" ) {
     dates <- strptime(dates, date.form)
   }
   caldat <- data.frame(value = values, dates = dates)
   min.date <- as.Date(paste(format(min(dates), "%Y"),
                             "-1-1",sep = ""))
   max.date <- as.Date(paste(format(max(dates), "%Y"),
                             "-12-31", sep = ""))
   dates.f <- data.frame(date.seq = seq(min.date, max.date, by="days"))
   
   # Merge moves data by one day, avoid
   caldat <- data.frame(date.seq = seq(min.date, max.date, by="days"), value = NA)
   dates <- as.Date(dates) 
   caldat$value[match(dates, caldat$date.seq)] <- values
   
   caldat$dotw <- as.numeric(format(caldat$date.seq, "%w"))
   caldat$woty <- as.numeric(format(caldat$date.seq, "%U")) + 1
   caldat$yr <- as.factor(format(caldat$date.seq, "%Y"))
   caldat$month <- as.numeric(format(caldat$date.seq, "%m"))
   yrs <- as.character(unique(caldat$yr))
   d.loc <- as.numeric()                        
   for (m in min(yrs):max(yrs)) {
     d.subset <- which(caldat$yr == m)  
     sub.seq <- seq(1,length(d.subset))
     d.loc <- c(d.loc, sub.seq)
   }  
   caldat <- cbind(caldat, seq=d.loc)
   
   #color styles
   #r2b <- c("#0571B0", "#92C5DE", "#F7F7F7", "#F4A582", "#CA0020") #red to blue  
   r2b <- c( "#CA0020","#F4A582","#F7F7F7","#92C5DE","#0571B0") # blue to red
   #r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")   #red to green
   #r2r <- c("#FEF0D9","#FDCC8A","#FC8D59","#E34A33","#B30000")
   #r2g <- c( "#B5E384","#FFFFBD","#FFAE63","#D61818" )   #green to red
   #w2b <- c("#045A8D", "#2B8CBE", "#74A9CF", "#BDC9E1", "#F1EEF6")   #white to blue
   r2r <- c("#F1EEF6","#FFFFCC","#A1DAB4","#2C7FB8","#253494")   
   #"#2C7FB8",
   #"#41B6C4"
   
   #r2r <- c("#EFF3FF","#BDD7E7","#6BAED6","#3182BD","#08519C")
   
   assign("col.sty", get(color))
   calendar.pal <- colorRampPalette((col.sty), space = "Lab")
   def.theme <- lattice.getOption("default.theme")
   cal.theme <-
     function() {  
       theme <-
         list(
           strip.background = list(col = "transparent"),
           strip.border = list(col = "transparent"),
           axis.line = list(col="transparent"),
           par.strip.text=list(cex=0.8))
     }
   lattice.options(default.theme = cal.theme)
   yrs <- (unique(caldat$yr))
   nyr <- length(yrs)
   print(cal.plot <- levelplot(value~woty*dotw | yr, data=caldat,
                               as.table=TRUE,
                               aspect=.12,
                               layout = c(1, nyr%%7),
                               between = list(x=0, y=c(1,1)),
                               strip=TRUE,
                               main = paste(" ", varname, sep = ""),
                               scales = list(
                                 x = list(
                                   at= c(seq(2.9, 52, by=4.42)),
                                   labels = month.abb,
                                   alternating = c(1, rep(0, (nyr-1))),
                                   tck=0,
                                   cex = 0.7),
                                 y=list(
                                   at = c( 1, 2, 3, 4, 5, 6, 0),
                                   labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"),
                                   alternating = 1,
                                   cex = 0.8,
                                   tck=0)),
                               xlim =c(0.4, 54.6),
                               ylim=c(6.6,-0.6),
                               cuts= ncolors - 1,
                               col.regions = (calendar.pal(ncolors)),
                               xlab="" ,
                               ylab="",
                               colorkey= list(col = calendar.pal(ncolors), width = 0.6, height = 0.5),
                               subscripts=TRUE
   ) )
   panel.locs <- trellis.currentLayout()
   for (row in 1:nrow(panel.locs)) {
     for (column in 1:ncol(panel.locs))  {
       if (panel.locs[row, column] > 0)
       {
         trellis.focus("panel", row = row, column = column,
                       highlight = FALSE)
         xyetc <- trellis.panelArgs()
         subs <- caldat[xyetc$subscripts,]
         dates.fsubs <- caldat[caldat$yr == unique(subs$yr),]
         y.start <- dates.fsubs$dotw[1]
         y.end   <- dates.fsubs$dotw[nrow(dates.fsubs)]
         dates.len <- nrow(dates.fsubs)
         adj.start <- dates.fsubs$woty[1]
         
         for (k in 0:6) {
           if (k < y.start) {
             x.start <- adj.start + 0.5
           } else {
             x.start <- adj.start - 0.5
           }
           if (k > y.end) {
             x.finis <- dates.fsubs$woty[nrow(dates.fsubs)] - 0.5
           } else {
             x.finis <- dates.fsubs$woty[nrow(dates.fsubs)] + 0.5
           }
           grid.lines(x = c(x.start, x.finis), y = c(k -0.5, k - 0.5), 
                      default.units = "native", gp=gpar(col = "grey", lwd = 1))
         }
         if (adj.start <  2) {
           grid.lines(x = c( 0.5,  0.5), y = c(6.5, y.start-0.5), 
                      default.units = "native", gp=gpar(col = "grey", lwd = 1))
           grid.lines(x = c(1.5, 1.5), y = c(6.5, -0.5), default.units = "native",
                      gp=gpar(col = "grey", lwd = 1))
           grid.lines(x = c(x.finis, x.finis), 
                      y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
                      gp=gpar(col = "grey", lwd = 1))
           if (dates.fsubs$dotw[dates.len] != 6) {
             grid.lines(x = c(x.finis + 1, x.finis + 1), 
                        y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
                        gp=gpar(col = "grey", lwd = 1))
           }
           grid.lines(x = c(x.finis, x.finis), 
                      y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = "native",
                      gp=gpar(col = "grey", lwd = 1))
         }
         for (n in 1:51) {
           grid.lines(x = c(n + 1.5, n + 1.5), 
                      y = c(-0.5, 6.5), default.units = "native", gp=gpar(col = "grey", lwd = 1))
         }
         x.start <- adj.start - 0.5
         
         if (y.start > 0) {
           grid.lines(x = c(x.start, x.start + 1),
                      y = c(y.start - 0.5, y.start -  0.5), default.units = "native",
                      gp=gpar(col = "black", lwd = 1.75))
           grid.lines(x = c(x.start + 1, x.start + 1),
                      y = c(y.start - 0.5 , -0.5), default.units = "native",
                      gp=gpar(col = "black", lwd = 1.75))
           grid.lines(x = c(x.start, x.start),
                      y = c(y.start - 0.5, 6.5), default.units = "native",
                      gp=gpar(col = "black", lwd = 1.75))
           if (y.end < 6  ) {
             grid.lines(x = c(x.start + 1, x.finis + 1),
                        y = c(-0.5, -0.5), default.units = "native",
                        gp=gpar(col = "black", lwd = 1.75))
             grid.lines(x = c(x.start, x.finis),
                        y = c(6.5, 6.5), default.units = "native",
                        gp=gpar(col = "black", lwd = 1.75))
           } else {
             grid.lines(x = c(x.start + 1, x.finis),
                        y = c(-0.5, -0.5), default.units = "native",
                        gp=gpar(col = "black", lwd = 1.75))
             grid.lines(x = c(x.start, x.finis),
                        y = c(6.5, 6.5), default.units = "native",
                        gp=gpar(col = "black", lwd = 1.75))
           }
         } else {
           grid.lines(x = c(x.start, x.start),
                      y = c( - 0.5, 6.5), default.units = "native",
                      gp=gpar(col = "black", lwd = 1.75))
         }
         
         if (y.start == 0 ) {
           if (y.end < 6  ) {
             grid.lines(x = c(x.start, x.finis + 1),
                        y = c(-0.5, -0.5), default.units = "native",
                        gp=gpar(col = "black", lwd = 1.75))
             grid.lines(x = c(x.start, x.finis),
                        y = c(6.5, 6.5), default.units = "native",
                        gp=gpar(col = "black", lwd = 1.75))
           } else {
             grid.lines(x = c(x.start + 1, x.finis),
                        y = c(-0.5, -0.5), default.units = "native",
                        gp=gpar(col = "black", lwd = 1.75))
             grid.lines(x = c(x.start, x.finis),
                        y = c(6.5, 6.5), default.units = "native",
                        gp=gpar(col = "black", lwd = 1.75))
           }
         }
         for (j in 1:12)  {
           last.month <- max(dates.fsubs$seq[dates.fsubs$month == j])
           x.last.m <- dates.fsubs$woty[last.month] + 0.5
           y.last.m <- dates.fsubs$dotw[last.month] + 0.5
           grid.lines(x = c(x.last.m, x.last.m), y = c(-0.5, y.last.m),
                      default.units = "native", gp=gpar(col = "black", lwd = 1.75))
           if ((y.last.m) < 6) {
             grid.lines(x = c(x.last.m, x.last.m - 1), y = c(y.last.m, y.last.m),
                        default.units = "native", gp=gpar(col = "black", lwd = 1.75))
             grid.lines(x = c(x.last.m - 1, x.last.m - 1), y = c(y.last.m, 6.5),
                        default.units = "native", gp=gpar(col = "black", lwd = 1.75))
           } else {
             grid.lines(x = c(x.last.m, x.last.m), y = c(- 0.5, 6.5),
                        default.units = "native", gp=gpar(col = "black", lwd = 1.75))
           }
         }
       }
     }
     trellis.unfocus()
   } 
   lattice.options(default.theme = def.theme)
 }
 
 ## Example of use: Plot financial data
 ## This code is not run.
 if(FALSE) {
   
   #create faux data; skip this to use data from a file or stock data
   #ndays <- 1500   #set number of days
   #dates <- as.POSIXlt(seq(Sys.Date()- ndays, Sys.Date() - 1, by="days"))
   #vals <- runif(ndays, -100, 100)
   
   #stock data:
   stock <- "MSFT"
   start.date <- "2006-01-12"
   end.date <- Sys.Date()
   quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
                  stock,
                  "&a=", substr(start.date,6,7),
                  "&b=", substr(start.date, 9, 10),
                  "&c=", substr(start.date, 1,4), 
                  "&d=", substr(end.date,6,7),
                  "&e=", substr(end.date, 9, 10),
                  "&f=", substr(end.date, 1,4),
                  "&g=d&ignore=.csv", sep="")             
   stock.data <- read.csv(quote, as.is=TRUE)
   
   # Plot as calendar heatmap
   calendarHeat(stock.data$Date, stock.data$Adj.Close, varname="MSFT Adjusted Close")
 }


######################## Ramadan Gannudâ€™s Work###################################

Code for Radar plot:

library(fmsb)
library(ggplot2)
library(plyr)
library(gam)
library(beanplot)
library(reshape)
ds = read.table("day.csv", header=T, sep=',')
keeps <- c("dteday","season","yr","mnth","holiday","weekday","workingday","weathersit","temp",
           "hum", "windspeed", "casual", "registered","cnt" )
bike = ds[keeps]

bike <- data.frame(bike$dteday, bike$season, bike$yr, bike$mnth, as.factor(bike$holiday), bike$weekday, as.factor(bike$workingday), as.factor(bike$weathersit), bike$temp, bike$hum, 
                   bike$windspeed, bike$casual, bike$registered, bike$cnt)
names(bike) <- c("date","season", "year", "month", "holiday", "weekday", "workingday",  "weathertype", "temperature", "humidity", "windspeed","casual", "registered", "count")

colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) )
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) )

###############################################################################
#Temperature vs Weather type (RADAR PLOT)

bikeradar = bike

bikeradar$newtemperaturef = (bikeradar$temperature*41*9/5 + 32 )
bikeradar$temperaturetype = (bikeradar$newtemperaturef)
bikeradar <- bikeradar[ -c(1:7) ]
bikeradar <- bikeradar[ -c(2,3:6) ]
head(bikeradar)

bikeradar$temperaturetype[bikeradar$newtemperaturef>=76 & bikeradar$newtemperaturef<105] <- "Hot"
bikeradar$temperaturetype[bikeradar$newtemperaturef>=68 & bikeradar$newtemperaturef<76] <- "Warm"
bikeradar$temperaturetype[bikeradar$newtemperaturef>=59 & bikeradar$newtemperaturef<68] <- "Mild"
bikeradar$temperaturetype[bikeradar$newtemperaturef>=45 & bikeradar$newtemperaturef<59] <- "Cold"
bikeradar$temperaturetype[bikeradar$newtemperaturef>=32 & bikeradar$newtemperaturef<45] <- "Very cold"
head(bikeradar)

bikeradarsummary <- ddply(bikeradar,.( weathertype, temperaturetype), summarise, 
                 count = mean(count))
radards = cast(bikeradarsummary,weathertype~temperaturetype)
radards <- radards[-c(1)]

radards=radards[c(2,4,5,3,1)]
head(radards)
rownames(radards) <- c("Clear or Cloudy", "Mist", "Light Rain or Snow")
radards[is.na(radards)] <- 0
head(radards)

result <- rbind(radards, c(5952.348,5952.348,5952.348,5952.348,5952.348))
result <- rbind(result, c(0,0,0,0,0))
rownames(result) <- c("Clear or Cloudy", "Mist", "Light Rain or Snow", "1","2")
result = result[c(4,5,1,2,3),]

radarchart( result, axistype=1 , #maxmin=F, 
            #custom polygon
            pcol=colors_border , pfcol=colors_in , plwd=2.5 , plty=1,
            #custom the grid
            cglcol="darkgrey", cglty=3, axislabcol="black", calcex = 1,caxislabels=seq(0,6000,1500), cglwd=0.8,
            #custom labels
            vlcex=1 ,  title="Temperature vs Weather type")

legend(x=1, y=1.3, legend = rownames(radards), bty = "n", pch=20 , col=colors_in ,
       text.col = "black", cex=1.1, pt.cex=3, title="Weather Type")

###############################################################################
#Windspeed vs Weather type (RADAR PLOT)
#wind*67
windradar = bike

windradar$windspeed = (windradar$windspeed*67)
windradar$windtype = (windradar$windspeed)
windradar <- windradar[ -c(1:7) ]

windradar$windtype=windradar$windspeed

windradar$windtype[(windradar$windspeed >= 28) & (windradar$windspeed < 39)] <- "Fresh Breeze [28-39)"
windradar$windtype[(windradar$windspeed >= 19) & (windradar$windspeed < 28)] <- "Moderate Breeze [19-28)"
windradar$windtype[(windradar$windspeed >= 12) & (windradar$windspeed < 19)] <- "Gentle Breeze [12-19)"
windradar$windtype[(windradar$windspeed < 5) & (windradar$windspeed >= 1)] <- "Light Air [1-5)"
windradar$windtype[(windradar$windspeed < 12) & (windradar$windspeed >= 5)] <- "Light Breeze [5-12)"

windradar <- windradar[ -c(2:6) ]

windradarsummary <- ddply(windradar,.( weathertype, windtype), summarise, 
                          count = mean(count))
windds = cast(windradarsummary,weathertype~windtype)
windds <- windds[-c(1)]
windds=windds[c(3,1,5,2,4)]
windds[is.na(windds)] <- 0

windresult <- rbind(windds, c(5952.348,5952.348,5952.348,5952.348,5952.348))
windresult <- rbind(windresult, c(0,0,0,0,0))
rownames(windresult) <- c("Clear or Cloudy", "Mist", "Light Rain or Snow", "1","2")
windresult = windresult[c(4,5,1,2,3),]


radarchart( windresult, axistype=1 , #maxmin=F, 
            pcol=colors_border , pfcol=colors_in , plwd=2.5 , plty=1,
            cglcol="darkgrey", cglty=3, axislabcol="black", calcex = 1,caxislabels=seq(0,6000,1500), 
            cglwd=0.8,
            vlcex=1 ,  title="Wind Speed (Km/hr) vs Weather type")
###############################################################################
#humidity vs Weather type (RADAR PLOT)
#hum*100
humradar = bike

humradar$humidity = (humradar$humidity*100)
humradar$humtype = (humradar$humidity)
humradar <- humradar[ -c(1:7) ]

humradar$humtype[humradar$humidity <=20] <- "0-20%"
humradar$humtype[humradar$humidity >20 & humradar$humidity <= 40] <- "21-40%"
humradar$humtype[(humradar$humidity >40) & (humradar$humidity <= 60)] <- "41-60%"
humradar$humtype[(humradar$humidity >60) & (humradar$humidity <= 80)] <- "61-80%"
humradar$humtype[(humradar$humidity >80) & (humradar$humidity <=100)] <- "81-100%"

humradar <- humradar[ -c(2,4:6) ]
humradar <- humradar[ -c(2)]
head(humradar)

humradarsummary <- ddply(humradar,.( weathertype, humtype), summarise, 
                          count = mean(count))
humds = cast(humradarsummary,weathertype~humtype)
humds <- humds[-c(1)]
humds=humds[c(1,5,4,3,2)]
humds[is.na(humds)] <- 0

humresult <- rbind(humds, c(5952.348,5952.348,5952.348,5952.348,5952.348))
humresult <- rbind(humresult, c(0,0,0,0,0))
rownames(humresult) <- c("Clear or Cloudy", "Mist", "Light Rain or Snow", "1","2")
humresult = humresult[c(4,5,1,2,3),]

radarchart( humresult, axistype=1 , #maxmin=F, 
            pcol=colors_border , pfcol=colors_in , plwd=2.5 , plty=1,
            cglcol="darkgrey", cglty=3, axislabcol="black", calcex = 1,caxislabels=seq(0,6000,1500), 
            cglwd=0.8,
            vlcex=1 ,  title="Humidity vs Weather Type")
#################################################################################
Code for Overlapped Bean plots:

##GeomSplitViolin

GeomSplitViolin <- ggproto("GeomSplitViolin", GeomViolin, draw_group = function(self, data, ..., draw_quantiles = NULL){
  data <- transform(data, xminv = x - violinwidth * (x - xmin), xmaxv = x + violinwidth * (xmax - x))
  grp <- data[1,'group']
  newdata <- plyr::arrange(transform(data, x = if(grp%%2==1) xminv else xmaxv), if(grp%%2==1) y else -y)
  newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
  newdata[c(1,nrow(newdata)-1,nrow(newdata)), 'x'] <- round(newdata[1, 'x'])
  if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
    stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <=
                                              1))
    quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
    aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
    aesthetics$alpha <- rep(1, nrow(quantiles))
    both <- cbind(quantiles, aesthetics)
    quantile_grob <- GeomPath$draw_panel(both, ...)
    ggplot2:::ggname("geom_split_violin", grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
  }
  else {
    ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
  }
})

geom_split_violin <- function (mapping = NULL, data = NULL, stat = "ydensity", position = "identity", ..., draw_quantiles = NULL, trim = TRUE, scale = "area", na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) {
  layer(data = data, mapping = mapping, stat = stat, geom = GeomSplitViolin, position = position, show.legend = show.legend, inherit.aes = inherit.aes, params = list(trim = trim, scale = scale, draw_quantiles = draw_quantiles, na.rm = na.rm, ...))
}

#OVERLAIN BEAN PLOT

beands <- bike[-c(4:11,14)]
beands <- beands[-c(1)]
beands <- melt(beands, id=c("season", "year"))
names(beands)[3]<-"usertype"
names(beands)[4]<-"count"

beands$season_new[beands$season==1] <- "Spring"
beands$season_new[beands$season==2] <- "Summer"
beands$season_new[beands$season==3] <- "Fall"
beands$season_new[beands$season==4] <- "Winter"
beands$year_new[beands$year==0] <- "year 2011"
beands$year_new[beands$year==1] <- "year 2012"

ggplot(beands, aes(season_new, count, fill =usertype, color =year_new )) + 
  geom_split_violin(alpha = .4, width = 1.4) + scale_color_manual(values=c("#3182bd", rgb(0.8,0.2,0.5,0.9))) + 
  stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean, geom = "crossbar", width = .05  )+
  scale_fill_manual(values=c( '#fff7bc' , rgb(0.2,0.5,0.5,0.9))) +
  labs(title = "Rental counts vs Seasons for different User Types & different years") + 
  xlab("Seasons") + ylab("Rental Counts")

